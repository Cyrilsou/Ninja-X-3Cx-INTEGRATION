version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: 3cx-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-threecx_integration}
      POSTGRES_USER: ${POSTGRES_USER:-threecx}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - threecx-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-threecx}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for queuing
  redis:
    image: redis:7-alpine
    container_name: 3cx-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    networks:
      - threecx-net
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Event Receiver Service
  event-receiver:
    build:
      context: ./server/event-receiver
      dockerfile: Dockerfile
    container_name: 3cx-event-receiver
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      STORAGE_PATH: /app/storage
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
    volumes:
      - audio_storage:/app/storage
    networks:
      - threecx-net
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Orchestrator Service
  orchestrator:
    build:
      context: ./server/orchestrator
      dockerfile: Dockerfile
    container_name: 3cx-orchestrator
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3002
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      NINJAONE_CLIENT_ID: ${NINJAONE_CLIENT_ID}
      NINJAONE_CLIENT_SECRET: ${NINJAONE_CLIENT_SECRET}
      NINJAONE_INSTANCE_URL: ${NINJAONE_INSTANCE_URL}
      WEBSOCKET_PORT: 3003
    ports:
      - "3003:3003"
    networks:
      - threecx-net
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Whisper Worker with GPU
  whisper-worker:
    build:
      context: ./server/whisper-worker
      dockerfile: Dockerfile
    container_name: 3cx-whisper-worker
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    environment:
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      MODEL_SIZE: ${WHISPER_MODEL:-large-v3}
      DEVICE: cuda
      COMPUTE_TYPE: float16
      STORAGE_PATH: /app/storage
    volumes:
      - audio_storage:/app/storage
      - whisper_models:/app/models
    networks:
      - threecx-net
    depends_on:
      redis:
        condition: service_healthy

  # TV Dashboard
  tv-dashboard:
    build:
      context: ./server/tv-dashboard
      dockerfile: Dockerfile
    container_name: 3cx-tv-dashboard
    environment:
      NEXT_PUBLIC_WEBSOCKET_URL: wss://${DOMAIN}/ws
    networks:
      - threecx-net

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: 3cx-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./server/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./server/nginx/ssl:/etc/nginx/ssl:ro
    environment:
      - DOMAIN=${DOMAIN}
    networks:
      - threecx-net
    depends_on:
      - event-receiver
      - orchestrator
      - tv-dashboard

  # Configuration UI
  config-ui:
    build:
      context: ./server/config-ui
      dockerfile: Dockerfile
    container_name: 3cx-config-ui
    ports:
      - "8080:8080"
    volumes:
      - ./.env:/app/.env
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - threecx-net
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  audio_storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${AUDIO_STORAGE_PATH:-/var/lib/3cx-integration/audio}
  whisper_models:
    driver: local

networks:
  threecx-net:
    driver: bridge